<?php

namespace Model\Client;

use Model\Client\Client;
use Model\Banco\SistemaConexao;
use Model\Banco\Util;
use Model\Model\Colaborador;

class UpdateModelo extends Client {
	public function __construct($aRequest, $aLazy = true){
		parent::__construct($aRequest, $aLazy);
	}
	public function update(){
		$p = SistemaConexao::getInstance()->prepare("SHOW TABLES");
		$p->execute();
		$lista = array();
		while($row = $p->fetch(\PDO::FETCH_ASSOC)){
			$r = array();
			foreach($row as $k => $v){
				$r[Util::underlineToMaiuscula($k)] = Util::underlineToMaiuscula($v, true);
			}
			$lista[] = $r;
		}
		
		$attrs = array();
		
		foreach($lista as $v){
			
			$class = $v['tablesInDevGm'];
			$atributos = $this->atributo($class);
			$this->template($v, $atributos);
			$attrs[] = $atributos;
			
			file_put_contents("./vendor/model/src/Model/Model/" . $class . ".php", "<?php
namespace Model\Model;
use \Model\Model\Model;
use \Model\Banco\SistemaConexao;
use \Model\Banco\Util;
		
class " . $class . " extends Model{
	" . $this->variaveis($atributos) . "
	
	/**
	* Construtor
	* @param int \$aId opcional, se informado busca o objeto no banco de dados
	*/
	public function __construct(\$aId = null){
		if(\$aId != null){
			SistemaConexao::objeto(\$aId, \$this);
		}
	}
		
	public function __destruct(){
	}
	
	///////GET
	" . $this->get($atributos) . "
	
	///////SET
	" . $this->set($atributos) . "
	/**
	* Método responsável por retornar uma versão da classe em array
	*/
	public function toArray(){
		\$attr = get_object_vars(\$this);
		foreach(\$attr as \$k=>\$v){
			if(preg_match(\"/^_/\",\$k)){
				unset(\$attr[\$k]);
			}
		}
		return \$attr;
	}
					
	/**
	* Método responsável por retornar o de/para das colunas do objeto com o banco
	* @param string \$aAliasTabela aliás da tabela
	* @return string 
	*/
	public function dePara(\$aAliasTabela = \"\"){
		\$alias = \"\";
		if(!empty(\$aAliasTabela)){
			\$alias = \$aAliasTabela.\".\";
		}
		\$colunas = [];
		\$attr = get_object_vars(\$this);
		foreach(\$attr as \$k=>\$v){
			if(preg_match(\"/^_/\",\$k)){
				unset(\$attr[\$k]);
			}else{
				\$colunas[] = \$alias.Util::maiusculaToUnderline(\$k).\" as \".\$k;
			}
		}
		return implode(\",\",\$colunas);
	}
					
	/**
	* Método responsável por retornar o nome simples da classe
	*/
	public function className(){
		return \"" . $class . "\";
	}

	/**
	* Método responsável por retornar o nome completo da classe
	*/
	public function absoluteClassName(){
		return \"\\Model\\Model\\" . $class . "\";
	}
					
	".$this->buscaPorParent($class, $atributos)."
}");
			$outro = ("

	/**
	* Método responsável por criar a tabela do banco se ela não existir
	*/
	private function criarTabela(){
		\$sql = \"CREATE TABLE IF NOT EXISTS `sistema_rota`(
					`id` int(10) auto_increment,
					`nome` varchar(255) ,
					`view` varchar(255) ,
					`view_url` varchar(255) ,
					`controller` varchar(255) ,
					`controller_url` varchar(255) ,
					`descricao` varchar(255) ,
					PRIMARY KEY(`id`)
				)ENGINE=InnoDB DEFAULT CHARSET=utf8;\";
		\$pst = \"SistemaConexao::getInstance()->prepare(\$sql);
		\$pst->execute();
	}

	/**
	* Método responsável por salvar o novo objeto no banco de dados
	*/
	" . $this->salvar($atributos) . "

	/**
	* Método responsável por atualizar o objeto no banco
	*/
	" . $this->atualizar($atributos) . "

	/**
	* Método responsável por deletar um objeto do banco
	*/
	" . $this->deletar($atributos) . "

	/**
	* Método responsável por consultar um objeto no banco
	*/
	" . $this->consultar($atributos) . "
		
	/**
	* Método responsável por retornar uma versão da classe em json
	*/
	public function toJson(){
		\$attr = get_object_vars(\$this);
		foreach(\$attr as \$k=>\$v){
			if(preg_match(\"/^_/\",\$k)){
				unset(\$attr[\$k]);
			}
		}
		return json_encode(\$attr, true);
	}
}
");
		}
		return true;
	}
	private function salvar($aAtributos){
		$txt = "public function salvar(){
		\$classe = preg_replace(\"/.+\\\\\\\\([^\\\\\\\\]+)\$/\", \"\$1\", __CLASS__);
		\$tabela = Util::maiusculaToUnderline(\$classe);
		\$param = array();
		\$colunas = \"\";
		\$variavel = \"\";
		\$attr = get_object_vars(\$this);
		foreach(\$attr as \$k=>\$v){
			if(preg_match(\"/^_/\",\$k)){
				continue;
			}
			if(\$k == \"id\"){
				continue;	
			}
			
			if(\$colunas != \"\"){
				\$colunas .= \",\";
			}
			
			if(\$variavel != \"\"){
				\$variavel .= \",\";
			}
			\$key = Util::maiusculaToUnderline(\$k);
			
			\$colunas .= \$key;
			\$variavel .= \":\".\$k;
			\$param[\":\".\$k] = \$v;
		}
		\$sql = \"INSERT INTO \".\$tabela.\" (\".\$colunas.\") VALUES (\".\$variavel.\")\";
		\$p = SistemaConexao::getInstance()->prepare(\$sql);
		\$p->execute(\$param);
		\$id = SistemaConexao::getInstance()->lastInsertId();
		\$this->setId(\$id);
		return \$id;
	}
";
		return $txt;
	}
	private function atualizar($aAtributos){
		$txt = "public function atualizar(){
		\$classe = preg_replace(\"/.+\\\\\\\\([^\\\\\\\\]+)\$/\", \"\$1\", __CLASS__);
		\$tabela = Util::maiusculaToUnderline(\$classe);
		\$param = array();
		\$valor = \"\";
		\$attr = get_object_vars(\$this);
		foreach(\$attr as \$k=>\$v){
			if(preg_match(\"/^_/\",\$k)){
				continue;
			}
			if(\$k == \"id\"){
				\$param[\":id\"] = \$v;
				continue;
			}
				
			if(\$valor != \"\"){
				\$valor .= \",\";
			}
				
			\$key = Util::maiusculaToUnderline(\$k);
			\$valor .= \$key.\"=:\".\$k;
			
			\$param[\":\".\$k] = \$v;
		}
		\$sql = \"UPDATE \".\$tabela.\" SET \".\$valor.\" WHERE id=:id\";
		if(empty(\$param[\":id\"])){
			throw new \\Exception(\"Para atualizar o id é obrigatório.\",-1);
		}
		\$p = SistemaConexao::getInstance()->prepare(\$sql);
		\$p->execute(\$param);
		SistemaConexao::objeto(\$this->getId(), \$this);
		return \$this->getId();
	}";
		return $txt;
	}
	private function deletar($aAtributos){
		$txt = "";
		return $txt;
	}
	private function consultar($aAtributos){
		$txt = "";
		return $txt;
	}
	private function buscaPorParent($aClasse, $aAtributos){
		$txt = "";
		
		$colunas = "";
		foreach($aAtributos as $v){
			if(!empty($colunas)){
				$colunas .= ", \n\t\t\t\t\t";
			}else{
				$colunas .= "\n\t\t\t\t\t";
			}
			$colunas .= $v["field"]." as ".Util::underlineToMaiuscula($v["field"]);
		}
		
		
		foreach($aAtributos as $v){
			if(preg_match("/_id$/", $v['field'])){
				$parent = preg_replace("/(.+?)_id$/", "$1", $v['field']);
				
			$txt .= "\n\t"
				."\n\t/**"
				."\n\t* Método responsável por retornar a lista de ".$aClasse." com base no id de ".$parent
				."\n\t* Em caso de herança deve ser reimplementado"
				."\n\t* @param int \$a".Util::underlineToMaiuscula($parent, true)."Id id de ".$parent
				."\n\t* @return \\Model\\Model\\".$aClasse."[]"
				."\n\t*/"
				."\n\tpublic function buscarPor".Util::underlineToMaiuscula($parent, true)
				."(\$a".Util::underlineToMaiuscula($parent, true)."Id){"
				."\n\t\t\$sql = \"SELECT $colunas \n\t\t\t\tFROM "
				."\n\t\t\t\t\t".Util::maiusculaToUnderline($aClasse)
				."\n\t\t\t\tWHERE"
				."\n\t\t\t\t\t".$v['field']." =:id"
				."\";"
				."\n\t\t\$pst = SistemaConexao::getInstance()->prepare(\$sql);"
				."\n\t\t\$pst->execute([\":id\"=>\$a".Util::underlineToMaiuscula($parent, true)."Id]);"
				."\n\t\t\$result = [];"
				."\n\t\twhile(\$obj = \$pst->fetchObject(\"\\Model\\Model\\".$aClasse."\")){"
				."\n\t\t\t\$result[] = \$obj;"
				."\n\t\t}"
				."\n\t\treturn \$result;"
				."\n\t}"	;
				
			}
			
			
		}
		return $txt;
	}
	private function set($aAtributos){
		$txt = "";
		foreach($aAtributos as $v){
			$txt .= "\n\tpublic function set" . Util::underlineToMaiuscula($v['field'], true) . "(\$a" . Util::underlineToMaiuscula($v['field'], true) . "){\n\t\t\$this->" . Util::underlineToMaiuscula($v['field']) . " = \$a" . Util::underlineToMaiuscula($v['field'], true) . ";
	}";
		}
		return $txt;
	}
	private function get($aAtributos){
		$txt = "";
		
		foreach($aAtributos as $v){
			$coment = '';
			$return = '$this->' . Util::underlineToMaiuscula($v['field']);
			$param = "";
			if($v["type"] == "date"){
				$param = '$isObject = false';
				$return = 'new \DateTime('.$return.')';
				$coment = '
	/**
	 * @param bool $isObject [opcional] se true retorna um DateTime
	 * @return \DateTime
	 */';
			}
			if($v["type"] == "datetime"){
				$param = '$isObject = false';
				$return = 'new \DateTime('.$return.')';
				$coment = '
	/**
	 * @param bool $isObject [opcional] se true retorna um DateTime
	 * @return \DateTime
	 */';
			}
			if($v["type"] == "time"){
				$param = '$isObject = false';
				$return = 'new \DateTime('.$return.')';
				$coment = '
	/**
	 * @param bool $isObject [opcional] se true retorna um DateTime
	 * @return \DateTime
	 */';
			}
			
			$txt .= "\n\tpublic function get" . Util::underlineToMaiuscula($v['field'], true) . "($param){
		return $return;
	}";
		}
		return $txt;
	}
	private function variaveis($aAtributos){
		$txt = "";
		foreach($aAtributos as $v){
			$txt .= "\n\tprivate $" . Util::underlineToMaiuscula($v['field']) . ";";
		}
		return $txt;
	}
	private function atributo($aClasse){
		$sql = "desc " . Util::maiusculaToUnderline($aClasse);
		
		$p = SistemaConexao::getInstance()->prepare($sql);
		$p->execute();
		$result = array();
		while($_row = $p->fetch(\PDO::FETCH_ASSOC)){
			$_r = array();
			foreach($_row as $k => $v){
				$_r[Util::underlineToMaiuscula($k)] = $v;
			}
			$result[] = $_r;
		}
		return $result;
	}
	private function template($aTabela, $aListAtributos){
		$pasta = Util::maiusculaToUnderline($aTabela["tablesInDevGm"]);
		if(!file_exists("./template/" . $pasta)){
			mkdir("./template/" . $pasta);
		}
		$this->templateIndex("./template/" . $pasta . "/index.html", $aTabela, $aListAtributos);
		$this->templateTabela("./template/" . $pasta . "/tabela.html", $aTabela, $aListAtributos);
		$this->templateNovo("./template/" . $pasta . "/novo.html", $aTabela, $aListAtributos);
		$this->templateEdita("./template/" . $pasta . "/edita.html", $aTabela, $aListAtributos);
		$this->templateDeleta("./template/" . $pasta . "/deleta.html", $aTabela, $aListAtributos);
		$this->templateController("./template/" . $pasta . "/controller.js", $aTabela, $aListAtributos);
	}
	private function templateTabela($aPath, $aTabela, $aListAtributo){
		
		$btnC = '<button class="btn btn-sm btn-primary" data-ng-click="tabela.criar()"><span class="glyphicon glyphicon-plus"></span></button>';
		$btnR = '<button class="btn btn-sm btn-info" data-ng-click="tabela.criar()"><span class="glyphicon glyphicon-zoom-in"></span></button>';
		$btnU = '<button class="btn btn-sm btn-warning" data-ng-click="tabela.criar()"><span class="glyphicon glyphicon-pencil"></span></button>';
		$btnD = '<button class="btn btn-sm btn-danger" data-ng-click="tabela.criar()"><span class="glyphicon glyphicon-remove"></span></button>';
		
		$th = '';
		$td = '';
		foreach($aListAtributo as $k => $v){
			$th .= '<th>' . $v['field'] . '</th>';
			$td .= '<td>{{v.' . Util::underlineToMaiuscula($v['field']) . '}}</td>';
		}
		$conteudo = '
<div class="panel panel-default" id="tabela-gestao-cadastro-' . Util::maiusculaToUnderline($aTabela['tablesInDevGm']) . '">
	<div class="panel-heading">
		<span 
			style="clear:both;float: right;"
			class="glyphicon glyphicon-resize-full full" 
			onclick="imprimir(\'tabela-gestao-cadastro-' . Util::maiusculaToUnderline($aTabela['tablesInDevGm']) . '\')"
		></span>
		<h3 class="panel-title">' . $aTabela['tablesInDevGm'] . '</h3>
	</div>
	<div class="panel-body">
		<table class="table table-hover table-condensed">
	       <thead>
	           <tr>
	               ' . $th . '<th>Ação</th>
	           </tr>
	       </thead>
	       <tbody>
	           <tr data-ng-repeat="(k,v) in tabela.lista">' . $td . '<td>'.$btnC.$btnR.$btnU.$btnD.'</td></tr>
	       </tbody>
	   </table>
	</div>
</div>
				';
		file_put_contents($aPath, $conteudo);
	}
	private function templateNovo($aPath, $aTabela, $aListAtributo){
		$conteudo = '
				';
		file_put_contents($aPath, $conteudo);
	}
	private function templateEdita($aPath, $aTabela, $aListAtributo){
		$conteudo = '
				';
		file_put_contents($aPath, $conteudo);
	}
	private function templateDeleta($aPath, $aTabela, $aListAtributo){
		$conteudo = '
				';
		file_put_contents($aPath, $conteudo);
	}
	private function templateIndex($aPath, $aTabela, $aListAtributo){
		$conteudo = '
<div
	class="telas telas-gestao telas-gestao-cadastro telas-gestao-cadastro-' . Util::maiusculaToUnderline($aTabela['tablesInDevGm']) . '">
	<div data-ng-show="tela.ativa == \'tabela\'">
		<div data-ng-include="\'view/gestao/cadastro/' . Util::maiusculaToUnderline($aTabela['tablesInDevGm']) . '/tabela.html\'"></div>
	</div>
	<div data-ng-show="tela.ativa == \'deleta\'">
		<div data-ng-include="\'view/gestao/cadastro/' . Util::maiusculaToUnderline($aTabela['tablesInDevGm']) . '/deleta.html\'"></div>
	</div>
	<div data-ng-show="tela.ativa == \'edita\'">
		<div data-ng-include="\'view/gestao/cadastro/' . Util::maiusculaToUnderline($aTabela['tablesInDevGm']) . '/edita.html\'"></div>
	</div>
	<div data-ng-show="tela.ativa == \'novo\'">
		<div data-ng-include="\'view/gestao/cadastro/' . Util::maiusculaToUnderline($aTabela['tablesInDevGm']) . '/novo.html\'"></div>
	</div>
</div>
				';
		file_put_contents($aPath, $conteudo);
	}
	private function templateController($aPath, $aTabela, $aListAtributo){
		$conteudo = '
app.controller("gestaoCadastro' . Util::underlineToMaiuscula($aTabela['tablesInDevGm'], true) . 'Controller", [
		"$filter",
		"$scope",
		"$cookies",
		"api",
		function($filter, $scope, $cookies, api) {
			$scope.usuario = $cookies.getObject("usuario");
		
			$scope.tabela = new gestaoCadastro' . Util::underlineToMaiuscula($aTabela['tablesInDevGm'], true) . 'Controller_tabela(api);
		
			$scope.tela = new Tela($scope);
			$scope.tela.ativar("tabela");
		}
	]
);

function gestaoCadastro' . Util::underlineToMaiuscula($aTabela['tablesInDevGm'], true) . 'Controller_tabela(aApi){
	var _root = this;
	this.lista = [];
	this.listar = function(){
		//TODO:
	}
}
		';
		file_put_contents($aPath, $conteudo);
	}
	

}