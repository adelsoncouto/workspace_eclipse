<?php
namespace Model\Dashboard\Financeiro;

use Model\Dashboard\Financeiro\Hora;
use Model\Dashboard\Financeiro\Sindicato;
use Model\Dashboard\Financeiro\Feriado;

class CalculaCusto{
	
	/** @var Hora $hora */
	private $listHora;
	
	/** @var Sindicato $sindicato */
	private $sindicato;
	
	/** @var array(Hora) $listHoraPorDiaAndTipo */
	private $listHoraPorDiaAndTipo;
	
	/** @var Salario $salario */
	private $salario;
	
	 //TODO: Criar o retorno de verbas
	/**
	 * Calcula os custos 
	 * @param array(Model\Dashboard\Financeiro\Hora) $aListHora hora a ser verificada
	 * @param Sindicato $aSindicato sindicato a ser considerado
	 * @param Salario $aSalario salario do colaborador
	 */
	public function __construct(array $aListHora, Sindicato $aSindicato, 
			Salario $aSalario){
		$this->listHora = $aListHora;
		$this->sindicato = $aSindicato;
		$this->salario = $aSalario;
	}
	
	/**
	* Método responsável por verificar se o trabalho foi feito no domingo
	* @param \Model\Dashboard\Financeiro\Hora $aHora
	*/
	public function isDomingo(Hora $aHora){
		
		if($aHora->getData()->format("w") == 0){
			return true;
		}
		
		return false;
	}

	/**
	* Método responsável por verificar se o trabalho foi feito no sábado
	* @param \Model\Dashboard\Financeiro\Hora $aHora
	*/
	public function isSabado(Hora $aHora){
		
		if($aHora->getData()->format("w") == 6){
			return true;
		}
		
		return false;
	}

	/**
	* Método responsável por verificar se o trabalho foi feito em feriado 
	* @param \Model\Dashboard\Financeiro\Hora $aHora
	*/
	public function isFeriado(Hora $aHora){
	
		try{
			/** @var Feriado $feriado */
			$feriado = new Feriado(null, $aHora->getData());
			
			return true;
			
		}catch (\Exception $e){
			
			return false;
			
		}
	}

	/**
	* Método responsável por verificar se o trabalho foi feito em dia útil
	* @param \Model\Dashboard\Financeiro\Hora $aHora
	*/
	public function isDiaUtil(Hora $aHora){
		if($this->isDomingo($aHora)){
			return false;
		}
		
		if($this->isSabado($aHora)){
			return false;
		}
		
		if($this->isFeriado($aHora)){
			return false;
		}
		
		return true;
	}

	/**
	* Método responsável por agrupar as horas em tipos por dia
	*/
	public function agruparDiaAndTipo(){
		
		foreach($this->listHora as $kHora=>$vHora/** @var Hora $vHora */){
			//gera o key
			$key = $vHora->getData()->format("Y-m-d")
					."_".$vHora->getTipo();
			
			//cria um indice para o dia e o tipo se não existir
			if(!isset($this->listHoraPorDiaAndTipo[$key])){
				$this->listHoraPorDiaAndTipo[$key] = [];
			}
			
			//adiciona a hora no indice
			$this->listHoraPorDiaAndTipo[$key][] =$vHora;
		}
	}
	
	/**
	* Método responsável por divide a hora em função da quantidade de horas 
	* trabalhadas sequencialmente, caso de são paulo por exemplo
	* @param array(Hora) $aListHora lista de horas a ser subdivida 
	* devem ser todas do mesmo dia depois de passar por agruparDiaAndTipo
	* @return array(SindicatoHasVerba::id[Hora])
	*/
	public function subdividirHora(array $aListHora){
		
		//nova lista de horas por verba
		$lista = array();
		
		//para se a lista for vazia
		if(empty($aListHora)){
			return $lista;
		}
		
		$data = null;/** @var \DateTime $data */
		$tipo = "";
		$listVerba = array();/** @var array[SindicatoHasVerba] $listVerba */
		
		
		foreach($aListHora as $kHora=>$vHora){ /**@var Hora $vHora*/
			
			//verifica a data
			if(empty($data)){
				$data = $vHora->getData();
			}
			
			//verifica o tipo
			if(empty($tipo)){
				$tipo = explode("_",$vHora)[1];
			}
			
			//verifica as verbas
			if(empty($listVerba)){
				foreach ($this->sindicato->getListVerba() as $vVerba){
					/**@var SindicatoHasVerba $vVerba*/
					if($vVerba->getTipoHora() == $vHora->getTipo()){
						$listVerba[] = $vVerba;
					}
					
				}
			}
			
			//se for somente uma verba
			if(count($listVerba) == 1){
				$lista[$listVerba[0]->getId()] = $aListHora;
				return $lista;
			}
			
// 			/** @var \Model\Dashboard\Financeiro\Hora $vHora */
// 			foreach ($vListHora as $k => $vHora){
// 				if($vHora->getTipo() == "Hora extra"){
// 					$valor += $vHora->getTotalHora() * 1.5 * $this->salario->getValorHora();
// 				}
// 			}
			
		}
		
	}

	/**
	* Método responsável por calcular o custo do sobreaviso
	*/
	public function custoSobreaviso(){
		$valor = 0.00;
		foreach ($this->listHora as $kHora => $vHora){/**@var Hora $vHora*/
			if($vHora->getTipo() == "Sobreaviso"){
				$valor += $vHora->getTotalHora() 
							* $this->salario->getValorHora() / 3;
			}
		}
		
		return $valor;
	}
	
	/**
	* Método responsável por calcular o custo da hora extra
	*/
	public function custoHoraExtra(){
		$valor = 0.00;
		$this->agruparDiaAndTipo();
		foreach($this->listHoraPorDiaAndTipo as $kDataTipo => $vListHora){
					
		}
		//print_r($this->listHoraPorDiaAndTipo);
		
		return $valor;
	}
	
	
}