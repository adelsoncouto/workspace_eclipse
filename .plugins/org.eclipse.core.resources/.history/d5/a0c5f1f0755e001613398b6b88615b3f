<?php

namespace Model\Client;

use Model\Banco\SistemaConexao;
use Model\Model\SistemaUsuario as UsuarioModel;
use Model\Model\SistemaPerfil;
use Model\Model\SistemaRota;
use Model\Model\Colaborador;
use Model\Model\SistemaPerfilHasRota;

class SistemaUsuario{
	
	/** @var Colaborador $colaborador */
	private $colaborador;

	/** @var SistemaRota $rota */
	private $rota;
	
	/** @var SistemaPerfil $perfil */
	private $perfil;
	
	/** @var bool $criar */
	private $criar;
	
	/** @var bool $atualizar */
	private $atualizar;
	
	/** @var bool $deletar */
	private $deletar;
	
	/** @var bool $consultar */
	private $consultar;
	
	/** @var int $acesso */
	private $acesso;
	
	private $_rota;
	private $_request;
	
	
	public function __construct($aRequest, $aRota=null){
		$this->_rota = $aRota;
		$this->_request = $aRequest;
	}
	function __destruct(){
	}
	
	/**
	 * Verifica o usuário, perfil, rota, colaborador.
	 * Lança exceptions se não estiver logado, se não encontrar o colaborador, perfil ou rota.
	 * O caminho da rota deve ser passado no request
	 *
	 * @return array [sistemaUsuario=>sistemaUsuario[], colaborador=>colaboradorLogado[], sistemaRota=>sistemaRota, sistemaPerfil=>sistemaPerfil]
	 */
	public function verificarAcesso($aRota = null){
		if($aRota != null){
			$this->_request['params'] = $aRota;
		}
		print_r($this->_request);
		// verifica se o usuário está autenticado
		$ps = SistemaConexao::getInstance()->prepare("
				SELECT chave,id,perfil_id as perfilId 
				FROM sistema_usuario 
				WHERE chave =:chave and chave is not null and chave != '' 
				LIMIT 1");
		$ps->bindValue(':chave', $this->_request['auth']);
		$ps->execute();
		$usuario = $ps->fetch(\PDO::FETCH_ASSOC);
		
		if(empty($usuario["chave"])){
			throw new \Exception('Usuário não está autenticado', -55);
		}
		
		// verifica o colaborador
		$ps1 = SistemaConexao::getInstance()->prepare("SELECT 
				id as id,
				nome as nome,
				cpf as cpf,
				cnpj_colaborador_pj as cnpjColaboradorPj,
				rg as rg,
				emissor as emissor,
				uf_emissor_id as ufEmissorId,
				data_emissao as dataEmissao,
				ctps as ctps,
				ctps_serie as ctpsSerie,
				ctps_uf_id as ctpsUfId,
				pis as pis,
				pai as pai,
				mae as mae,
				quantidade_filho as quantidadeFilho,
				nascimento as nascimento,
				naturalidade as naturalidade,
				sexo_id as sexoId,
				estado_civil_id as estadoCivilId,
				endereco_residencal as enderecoResidencal,
				complemento as complemento,
				cidade as cidade,
				bairro as bairro,
				cep as cep,
				uf_res_id as ufResId,
				telefone_celular as telefoneCelular,
				telefone_residencial as telefoneResidencial,
				telefone_comercial as telefoneComercial,
				email as email,
				matricula as matricula,
				admissao as admissao,
				origem_do_recursos as origemDoRecursos,
				data_demissao as dataDemissao,
				motivo_da_demissao as motivoDaDemissao,
				cargo_id as cargoId,
				hierarquia_id as hierarquiaId,
				situacao_id as situacaoId,
				turno_id as turnoId,
				tipo_contratacao_id as tipoContratacaoId,
				usuario_id as usuarioId,
				empresa_id as empresaId,
				filial_id as filialId,
				sindicato_id as sindicatoId,
				municipio_id as municipioId,
				centro_de_custo_id as centroDeCustoId
			FROM colaborador WHERE usuario_id =:usuarioId 
			LIMIT 1");
		$ps1->bindValue(':usuarioId', $usuario['id']);
		$ps1->execute();
		$colaborador = $ps1->fetch(\PDO::FETCH_ASSOC);
		if(!$colaborador){
			throw new \Exception('Colaborador não encontrado', -2);
		}
		
		// verifica perfil
		$ps2 = SistemaConexao::getInstance()->prepare("SELECT id, nome, descricao FROM sistema_perfil WHERE id =:perfilId");
		$ps2->bindValue(":perfilId", $usuario["perfilId"]);
		$ps2->execute();
		$perfil = $ps2->fetch(\PDO::FETCH_ASSOC);
		if(!$perfil){
			throw new \Exception('Perfil não encontrado', -3);
		}
		
		// verifica as rota pelo nome
		$ps3 = SistemaConexao::getInstance()->prepare("
			SELECT 
				id as id,
				nome as nome,
				view as view,
				view_url as viewUrl,
				controller as controller,
				controller_url as controllerUrl,
				descricao as descricao
			FROM 
				sistema_rota 
			WHERE 
				nome =:nome
			LIMIT 1");
		$ps3->bindValue(":nome", $this->_request["params"]);
		$ps3->execute();
		$rota = $ps3->fetch(\PDO::FETCH_ASSOC);
		if(!$rota){
			throw new \Exception('Perfil não encontrado', -4);
		}
		
		// veifica o acesso
		$ps4 = SistemaConexao::getInstance()->prepare("
			SELECT
				id,
				perfil_id as perfilId,
				rota_id as rotaId,
				crud
			FROM
				sistema_perfil_has_rota
			WHERE
				perfil_id =:perfilId
				and rota_id =:rotaId
			LIMIT 1");
		$ps4->bindValue(":perfilId", $perfil["id"]);
		$ps4->bindValue(":rotaId", $rota["id"]);
		$ps4->execute();
		$acesso = $ps4->fetch(\PDO::FETCH_ASSOC);
		if(!$acesso){
			throw new \Exception('Acesso negado', -5);
		}
		
		$result = array(
				'colaborador'=> $colaborador,
				'sistemaUsuario'=> $usuario,
				'perfil'=> $perfil,
				'rota'=> $rota,
				'acesso'=> $acesso 
		);
		
		return $result;
	}
	
	/**
	 * 
	 * @param string $aRota nome da rota
	 * @param array $aRequest 
	 * @throws \Exception
	 * @return SistemaUsuario
	 */
	public function validarUsuario(){
		
		//usuario
		$usuario = new UsuarioModel();
		$sql = "select ".$usuario->dePara()." from sistema_usuario where chave is not null
				and chave != '' and chave=:chave";
		$listaUsuario = $usuario->listarPorSql($sql, [":chave"=>$this->_request["auth"]]);
		if(empty($listaUsuario)){
			throw new \Exception('Usuário não está autenticado', -1);
		}
		
		/** @var \Model\Model\SistemaUsuario $usuario */
		$usuario = $listaUsuario[0];
		
		//rota
		$rota = new SistemaRota();
		$sqlRota = "SELECT ".$rota->dePara()." FROM sistema_rota WHERE nome=:nome";
		$listRota = $rota->listarPorSql($sqlRota, [":nome"=>$this->_rota]);
		if(empty($listRota)){
			throw new \Exception('Rota não encontrada', -1);
		}
		
		/** @var \Model\Model\SistemaRota $rota */
		$rota = $listRota[0];
		
		$colaborador = new Colaborador();
		
		/** @var \Model\Model\Colaborador $colaborador */
		$colaborador = $colaborador->buscarPorUsuario($usuario->getId())[0];
		
		$perfil = new SistemaPerfil($usuario->getPerfilId());

		$perfilHasRota = new SistemaPerfilHasRota();
		
		$sqlPhR = "SELECT ".$perfilHasRota->dePara()." FROM sistema_perfil_has_rota 
				WHERE perfil_id=:pid and rota_id=:rid limit 1";
		$listaPerfilHasRota = $perfilHasRota->listarPorSql($sqlPhR,
				[":pid"=>$perfil->getId(),":rid"=>$rota->getId()]);
		
		if(empty($listaPerfilHasRota)){
			throw new \Exception("Acesso não autorizado");
		}
		
		/** @var \Model\Model\SistemaPerfilHasRota $perfilHasRota */
		$perfilHasRota = $listaPerfilHasRota[0];
		$cruda = explode(",",$perfilHasRota->getCrud());
		
		$this->colaborador = $colaborador;
		$this->rota = $rota;
		$this->perfil = $perfil;
		$this->criar = $cruda[0]==1;
		$this->consultar = $cruda[1]==1;
		$this->atualizar = $cruda[2]==1;
		$this->deletar = $cruda[3]==1;
		$this->acesso = $cruda[4];
	}
	public static function validarUusuario($aRota, $aRequest){
		
		// verifica se o usuário está autenticado
		$ps = SistemaConexao::getInstance()->prepare("
				SELECT 
					chave,
					id,
					perfil_id as perfilId 
				FROM 
					sistema_usuario 
				WHERE 
					chave =:chave 
					and chave is not null 
					and chave != ''
				LIMIT 1");
		$ps->bindValue(':chave', $aRequest['auth']);
		$ps->execute();
		$usuario = $ps->fetch(\PDO::FETCH_ASSOC);
		if(!$usuario){
			throw new \Exception('Usuário não está autenticado', -1);
		}
		
		// verifica o colaborador
		$ps1 = SistemaConexao::getInstance()->prepare("SELECT 
				id as id,
				nome as nome,
				cpf as cpf,
				cnpj_colaborador_pj as cnpjColaboradorPj,
				rg as rg,
				emissor as emissor,
				uf_emissor_id as ufEmissorId,
				data_emissao as dataEmissao,
				ctps as ctps,
				ctps_serie as ctpsSerie,
				ctps_uf_id as ctpsUfId,
				pis as pis,
				pai as pai,
				mae as mae,
				quantidade_filho as quantidadeFilho,
				nascimento as nascimento,
				naturalidade as naturalidade,
				sexo_id as sexoId,
				estado_civil_id as estadoCivilId,
				endereco_residencal as enderecoResidencal,
				complemento as complemento,
				cidade as cidade,
				bairro as bairro,
				cep as cep,
				uf_res_id as ufResId,
				telefone_celular as telefoneCelular,
				telefone_residencial as telefoneResidencial,
				telefone_comercial as telefoneComercial,
				email as email,
				matricula as matricula,
				admissao as admissao,
				origem_do_recursos as origemDoRecursos,
				data_demissao as dataDemissao,
				motivo_da_demissao as motivoDaDemissao,
				cargo_id as cargoId,
				hierarquia_id as hierarquiaId,
				situacao_id as situacaoId,
				turno_id as turnoId,
				tipo_contratacao_id as tipoContratacaoId,
				usuario_id as usuarioId,
				empresa_id as empresaId,
				filial_id as filialId,
				sindicato_id as sindicatoId,
				municipio_id as municipioId,
				centro_de_custo_id as centroDeCustoId
			FROM colaborador WHERE usuario_id =:usuarioId 
			LIMIT 1");
		$ps1->bindValue(':usuarioId', $usuario['id']);
		$ps1->execute();
		$colaborador = $ps1->fetch(\PDO::FETCH_ASSOC);
		if(!$colaborador){
			throw new \Exception('Colaborador não encontrado', -2);
		}
		
		// verifica perfil
		$ps2 = SistemaConexao::getInstance()->prepare("SELECT id, nome, descricao FROM sistema_perfil WHERE id =:perfilId");
		$ps2->bindValue(":perfilId", $usuario["perfilId"]);
		$ps2->execute();
		$perfil = $ps2->fetch(\PDO::FETCH_ASSOC);
		if(!$perfil){
			throw new \Exception('Perfil não encontrado', -3);
		}
		
		// verifica as rota pelo nome
		$ps3 = SistemaConexao::getInstance()->prepare("
			SELECT 
				id as id,
				nome as nome,
				view as view,
				view_url as viewUrl,
				controller as controller,
				controller_url as controllerUrl,
				descricao as descricao
			FROM 
				sistema_rota 
			WHERE 
				nome =:nome
			LIMIT 1");
		$ps3->bindValue(":nome", $aRota);
		$ps3->execute();
		$rota = $ps3->fetch(\PDO::FETCH_ASSOC);
		if(!$rota){
			throw new \Exception('Acesso não permitido para esse perfil', -4);
		}
		
		// veifica o acesso
		$ps4 = SistemaConexao::getInstance()->prepare("
			SELECT
				id,
				perfil_id as perfilId,
				rota_id as rotaId,
				crud
			FROM
				sistema_perfil_has_rota
			WHERE
				perfil_id =:perfilId
				and rota_id =:rotaId
			LIMIT 1");
		$ps4->bindValue(":perfilId", $perfil["id"]);
		$ps4->bindValue(":rotaId", $rota["id"]);
		$ps4->execute();
		$acesso = $ps4->fetch(\PDO::FETCH_ASSOC);
		if(!$acesso){
			throw new \Exception('Acesso negado', -5);
		}
		
		$result = array(
				'colaborador'=> $colaborador,
				'usuario'=> $usuario,
				'perfil'=> $perfil,
				'rota'=> $rota,
				'acesso'=> $acesso 
		);
		
		return $result;
	}
	public function consultar(){
		$buscaPorId = false;
		$sql = "SELECT * FROM sistema_usuario";
		
		if(is_numeric($this->_request['params'])){
			$sql .= " WHERE id =:id";
			$buscaPorId = true;
		}
		
		$result = array();
		
		$ps = SistemaConexao::getInstance()->prepare($sql);
		
		if($buscaPorId){
			$ps->bindValue(":id", $this->_request['params']);
		}
		$ps->execute();
		
		while($row = $ps->fetch(\PDO::FETCH_ASSOC)){
			$result[] = $row;
		}
		
		return $result;
	}

	///////////GET AND SET
	
	/**
	* @return Colaborador $colaborador
	*/
	public function getColaborador(){
		return $this->colaborador;
	}
	
	/**
	* @param Colaborador $aColaborador
	*/
	public function setColaborador($aColaborador){
		$this->colaborador = $aColaborador;
	}
	
	/**
	* @return SistemaRota $rota
	*/
	public function getRota(){
		return $this->rota;
	}
	
	/**
	* @param SistemaRota $aRota
	*/
	public function setRota($aRota){
		$this->rota = $aRota;
	}
	
	/**
	* @return SistemaPerfil $perfil
	*/
	public function getPerfil(){
		return $this->perfil;
	}
	
	/**
	* @param SistemaPerfil $aPerfil
	*/
	public function setPerfil($aPerfil){
		$this->perfil = $aPerfil;
	}
	
	/**
	* @return boolean $criar
	*/
	public function getCriar(){
		return $this->criar;
	}
	
	/**
	* @param boolean $aCriar
	*/
	public function setCriar($aCriar){
		$this->criar = $aCriar;
	}
	
	/**
	* @return boolean $atualizar
	*/
	public function getAtualizar(){
		return $this->atualizar;
	}
	
	/**
	* @param boolean $aAtualizar
	*/
	public function setAtualizar($aAtualizar){
		$this->atualizar = $aAtualizar;
	}
	
	/**
	* @return boolean $deletar
	*/
	public function getDeletar(){
		return $this->deletar;
	}
	
	/**
	* @param boolean $aDeletar
	*/
	public function setDeletar($aDeletar){
		$this->deletar = $aDeletar;
	}
	
	/**
	* @return boolean $consultar
	*/
	public function getConsultar(){
		return $this->consultar;
	}
	
	/**
	* @param boolean $aConsultar
	*/
	public function setConsultar($aConsultar){
		$this->consultar = $aConsultar;
	}
	
	/**
	* @return int $acesso
	*/
	public function getAcesso(){
		return $this->acesso;
	}
	
	/**
	* @param int $aAcesso
	*/
	public function setAcesso($aAcesso){
		$this->acesso = $aAcesso;
	}
}

?>
