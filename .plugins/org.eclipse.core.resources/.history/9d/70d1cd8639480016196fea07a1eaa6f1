<?php
namespace Model\Dashboard\Financeiro;

use Model\Dashboard\Financeiro\Hora;
use Model\Dashboard\Financeiro\Sindicato;
use Model\Dashboard\Financeiro\Feriado;

class CalculaCusto{
	
	/** @var Hora $hora */
	private $listHora;
	
	/** @var Sindicato $sindicato */
	private $sindicato;
	
	/** @var array(Hora) $listHoraPorDiaAndTipo */
	private $listHoraPorDiaAndTipo;
	
	/** @var Salario $salario */
	private $salario;
	
	 //TODO: Criar o retorno de verbas
	/**
	 * Calcula os custos 
	 * @param array(Model\Dashboard\Financeiro\Hora) $aListHora hora a ser verificada
	 * @param Sindicato $aSindicato sindicato a ser considerado
	 * @param Salario $aSalario salario do colaborador
	 */
	public function __construct(array $aListHora, Sindicato $aSindicato, 
			Salario $aSalario){
		$this->listHora = $aListHora;
		$this->sindicato = $aSindicato;
		$this->salario = $aSalario;
	}
	
	/**
	* Método responsável por verificar se o trabalho foi feito no domingo
	* @param \Model\Timesheet\Historico\ConsolidadoHoras $aHora
	*/
	public function isDomingo(Hora $aHora){
		
		if($aHora->getData()->format("w") == 0){
			return true;
		}
		
		return false;
	}

	/**
	* Método responsável por verificar se o trabalho foi feito no sábado
	* @param \Model\Dashboard\Financeiro\Hora $aHora
	*/
	public function isSabado(Hora $aHora){
		
		if($aHora->getData()->format("w") == 6){
			return true;
		}
		
		return false;
	}

	/**
	* Método responsável por verificar se o trabalho foi feito em feriado 
	* @param \Model\Dashboard\Financeiro\Hora $aHora
	*/
	public function isFeriado(Hora $aHora){
	
		try{
			/** @var Feriado $feriado */
			$feriado = new Feriado(null, $aHora->getData());
			
			return true;
			
		}catch (\Exception $e){
			
			return false;
			
		}
	}

	/**
	* Método responsável por verificar se o trabalho foi feito em dia útil
	* @param \Model\Dashboard\Financeiro\Hora $aHora
	*/
	public function isDiaUtil(Hora $aHora){
		if($this->isDomingo($aHora)){
			return false;
		}
		
		if($this->isSabado($aHora)){
			return false;
		}
		
		if($this->isFeriado($aHora)){
			return false;
		}
		
		return true;
	}

	/**
	* Método responsável por agrupar as horas em tipos por dia
	*/
	public function agruparDiaAndTipo(){
		
		foreach($this->listHora as $kHora=>$vHora/** @var Hora $vHora */){
			//gera o key
			$key = $vHora->getData()->format("Y-m-d")
					."_".$vHora->getTipo();
			
			//cria um indice para o dia e o tipo se não existir
			if(!isset($this->listHoraPorDiaAndTipo[$key])){
				$this->listHoraPorDiaAndTipo[$key] = [];
			}
			
			//adiciona a hora no indice
			$this->listHoraPorDiaAndTipo[$key][] =$vHora;
		}
	}
	
	/**
	* Método responsável por agrupar as verbas por hora 
	* trabalhadas sequencialmente, caso de são paulo por exemplo
	* @param array(Hora) $aListHora lista de horas a ser subdivida 
	* devem ser todas do mesmo dia depois de passar por agruparDiaAndTipo
	* @return array(SindicatoHasVerba::id[Hora])
	*/
	public function agruparHoraExtraPorVerba(array $aListHora){
		
		//para se não tiver lista de horas, pois é necessário saber o dia
		if(empty($aListHora)){
			return $listHora;
		}
		
		//pega a primeira hora pois todas devem estar no mesmo dia
		/** @var \Model\Dashboard\Financeiro\Hora $hora */
		$hora = $aListHora[0];
		
		//começa com dias úteis e altera se for dia diferente
		$dia = "Dias úteis";
		$dia = $this->isSabado($hora)?"Sábado":$dia;
		$dia = $this->isDomingo($hora)?"Domingo":$dia;
		$dia = $this->isFeriado($hora)?"Feriado":$dia;
		
		//pega as duas verbas, a que inicia em 00:00:00 e a outra
		$verbaInicio = null;/** @var SindicatoHasVerba $verbaInicio */
		$verbaFim = null;/** @var SindicatoHasVerba $verbaFim */
		
		//pega as verbas
		/** @var \Model\Dashboard\Financeiro\SindicatoHasVerba $vVerba */
		foreach($this->sindicato->getListVerba() as $kVerba=>$vVerba){
			if($vVerba->getTipoHora() == "Hora extra" 
					&& $vVerba->getDia() == $dia){
				if($vVerba->getHoraInicio() == "00:00:00"){
					$verbaInicio = $vVerba;
				}else{
					$verbaFim = $vVerba;
				}
			}
		}
		
		//para se não econtrou verba
		if(empty($verbaInicio)){
			throw new \Exception("O sindicato ".$this->sindicato->getNome()
					." não tem verba de hora extra",
					-debug_backtrace()[0]['line']);
		}
		
		//redivide as horas
		$listHora = array();
		
		//se houver só a verba de inicio então todas as horas serão dessa verba
		if(empty($verbaFim)){
			$listHora[0] = [
				'verba'=>$verbaInicio,
				'horas'=>$aListHora	
			];
			return $listHora;
		}
		
		//adiciona as verbas na lista de hora
		$listHora[0] = [
			'verba'=>$verbaInicio,
			'horas'=>[]
		];
		$listHora[1] = [
			'verba'=>$verbaFim,
			'horas'=>[]
		];
		
		//quantidade de horas na verba de inicio em horas
		/** @var \DateTime $dtInicio */
		$dtInicio = \DateTime::createFromFormat("H:i:s", 
				$verbaInicio->getHoraInicio());
		
		/** @var \DateTime $dtFim */
		$dtFim = \DateTime::createFromFormat("H:i:s", 
				$verbaInicio->getHoraFim());
		
		$qtdHoraVerbaInicio = ($dtFim->getTimestamp() 
				- $dtInicio->getTimestamp()) / 60 / 60;
		
		//quantidade de horas iniciais
		$qtdPrimeirasHoras = 0.00;
		
		//ordena a lista de horas de forma crescente a partir da hora de inicio
		usort($aListHora, array($this,"ordenarPorDataCrescente"));
		
		//percorre as horas
		/** @var \Model\Dashboard\Financeiro\Hora $vHora */
		foreach($aListHora as $kHora=>$vHora){
			
			//calcula o total de horas
			$somaQtdHoraInicio = $qtdPrimeirasHoras + $vHora->getTotalHora();
			
			//verifica se está dentro do limite da primeira verba
			if($somaQtdHoraInicio <= $qtdHoraVerbaInicio){
				$listHora[0]["horas"][] = $vHora;
				$qtdPrimeirasHoras = $somaQtdHoraInicio;
				continue;
			}
			
			//verifica se está dentro do limite
			if($qtdPrimeirasHoras >= $qtdHoraVerbaInicio){
				$listHora[1]["horas"][] = $vHora;
				$qtdPrimeirasHoras = $somaQtdHoraInicio;
				continue;
			}
			
			//divide as horas
			$hInicio = clone $vHora;
			$hFim = clone $vHora;
			
			//cria a data para separar
			/** @var \DateTime $novaHora */
			$novaHora = \DateTime::createFromFormat("H:i:s",$hInicio->getInicio());
			
			//pega a diferença em segundos
			$diferencaSegundo = (int)
							(($qtdHoraVerbaInicio - $qtdPrimeirasHoras)*60*60);
			
			//acrescenta os segundos
			$novaHora->add(\DateInterval::createFromDateString(
					$diferencaSegundo." second"));
			
			//atualiza as horas
			$hInicio->setFim($novaHora->format("H:i:s"));
			$hFim->setInicio($novaHora->format("H:i:s"));
			
			//atualiza a quantidade de horas
			$hInicio->setTotalHora($hInicio->contarHora());
			$hFim->setTotalHora($hFim->contarHora());
			
			//adiciona na lista
			$listHora[0]["horas"][] = $hInicio;
			$listHora[1]["horas"][] = $hFim;
			
			//atualiza a contagem
			$qtdPrimeirasHoras = $somaQtdHoraInicio;
			
		}
		
		return $listHora;
			
	}

	/**
	* Método responsável por ordenar a lista de horas por hora de inicio de 
	* forma crescente
	* @param Hora $a
	* @param Hora $b
	*/
	private function ordenarPorDataCrescente($a, $b){
		
		/** @var \DateTime $inicioA */
		$inicioA = \DateTime::createFromFormat("H:i:s", $a->getInicio());
		
		/** @var \DateTime $inicioB */
		$inicioB = \DateTime::createFromFormat("H:i:s", $b->getInicio());
		
		return $inicioA->getTimestamp() - $inicioB->getTimestamp();
	}
	
	
}